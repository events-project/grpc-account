// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v6.30.2
// source: service.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "account";

export enum PaymentStatus {
  PS_UNKNOWN = 0,
  PENDING = 1,
  PAID = 2,
  FAILED = 3,
  UNRECOGNIZED = -1,
}

export function paymentStatusFromJSON(object: any): PaymentStatus {
  switch (object) {
    case 0:
    case "PS_UNKNOWN":
      return PaymentStatus.PS_UNKNOWN;
    case 1:
    case "PENDING":
      return PaymentStatus.PENDING;
    case 2:
    case "PAID":
      return PaymentStatus.PAID;
    case 3:
    case "FAILED":
      return PaymentStatus.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PaymentStatus.UNRECOGNIZED;
  }
}

export function paymentStatusToJSON(object: PaymentStatus): string {
  switch (object) {
    case PaymentStatus.PS_UNKNOWN:
      return "PS_UNKNOWN";
    case PaymentStatus.PENDING:
      return "PENDING";
    case PaymentStatus.PAID:
      return "PAID";
    case PaymentStatus.FAILED:
      return "FAILED";
    case PaymentStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface CreateAccountRequest {
  id: string;
}

export interface GetAccountRequest {
  id: string;
}

export interface Account {
  id: string;
  stripeId: string;
}

export interface ValidateApiKeyRequest {
  key: string;
}

export interface RevealApiKeyRequest {
  accountId: string;
  secretId: string;
}

export interface RevealApiKeyResponse {
  apiKey: string;
}

export interface SummarizePeriodUsageRequest {
  appId: string;
  /** ISO string */
  target: string;
}

export interface SummarizePeriodUsageResponse {
  id: string;
  appId: string;
  start: string;
  end: string;
  credits: string;
}

export interface UpdateBillingRequest {
  id: string;
  paymentId: string;
  /** must match enum: "PAID", "FAILED" */
  paymentStatus: string;
}

export interface UpdateBillingResponse {
  id: string;
  appId: string;
  start: string;
  end: string;
  credits: string;
  paymentId: string;
  paymentStatus: string;
  updatedAt: string;
}

function createBaseCreateAccountRequest(): CreateAccountRequest {
  return { id: "" };
}

export const CreateAccountRequest = {
  encode(message: CreateAccountRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateAccountRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAccountRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: CreateAccountRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAccountRequest>): CreateAccountRequest {
    return CreateAccountRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAccountRequest>): CreateAccountRequest {
    const message = createBaseCreateAccountRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetAccountRequest(): GetAccountRequest {
  return { id: "" };
}

export const GetAccountRequest = {
  encode(message: GetAccountRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAccountRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAccountRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetAccountRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAccountRequest>): GetAccountRequest {
    return GetAccountRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAccountRequest>): GetAccountRequest {
    const message = createBaseGetAccountRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseAccount(): Account {
  return { id: "", stripeId: "" };
}

export const Account = {
  encode(message: Account, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.stripeId !== "") {
      writer.uint32(18).string(message.stripeId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Account {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.stripeId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Account {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      stripeId: isSet(object.stripeId) ? globalThis.String(object.stripeId) : "",
    };
  },

  toJSON(message: Account): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.stripeId !== "") {
      obj.stripeId = message.stripeId;
    }
    return obj;
  },

  create(base?: DeepPartial<Account>): Account {
    return Account.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Account>): Account {
    const message = createBaseAccount();
    message.id = object.id ?? "";
    message.stripeId = object.stripeId ?? "";
    return message;
  },
};

function createBaseValidateApiKeyRequest(): ValidateApiKeyRequest {
  return { key: "" };
}

export const ValidateApiKeyRequest = {
  encode(message: ValidateApiKeyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ValidateApiKeyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateApiKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateApiKeyRequest {
    return { key: isSet(object.key) ? globalThis.String(object.key) : "" };
  },

  toJSON(message: ValidateApiKeyRequest): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create(base?: DeepPartial<ValidateApiKeyRequest>): ValidateApiKeyRequest {
    return ValidateApiKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidateApiKeyRequest>): ValidateApiKeyRequest {
    const message = createBaseValidateApiKeyRequest();
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseRevealApiKeyRequest(): RevealApiKeyRequest {
  return { accountId: "", secretId: "" };
}

export const RevealApiKeyRequest = {
  encode(message: RevealApiKeyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.accountId !== "") {
      writer.uint32(10).string(message.accountId);
    }
    if (message.secretId !== "") {
      writer.uint32(18).string(message.secretId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RevealApiKeyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevealApiKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.secretId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RevealApiKeyRequest {
    return {
      accountId: isSet(object.accountId) ? globalThis.String(object.accountId) : "",
      secretId: isSet(object.secretId) ? globalThis.String(object.secretId) : "",
    };
  },

  toJSON(message: RevealApiKeyRequest): unknown {
    const obj: any = {};
    if (message.accountId !== "") {
      obj.accountId = message.accountId;
    }
    if (message.secretId !== "") {
      obj.secretId = message.secretId;
    }
    return obj;
  },

  create(base?: DeepPartial<RevealApiKeyRequest>): RevealApiKeyRequest {
    return RevealApiKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RevealApiKeyRequest>): RevealApiKeyRequest {
    const message = createBaseRevealApiKeyRequest();
    message.accountId = object.accountId ?? "";
    message.secretId = object.secretId ?? "";
    return message;
  },
};

function createBaseRevealApiKeyResponse(): RevealApiKeyResponse {
  return { apiKey: "" };
}

export const RevealApiKeyResponse = {
  encode(message: RevealApiKeyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.apiKey !== "") {
      writer.uint32(10).string(message.apiKey);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RevealApiKeyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevealApiKeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apiKey = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RevealApiKeyResponse {
    return { apiKey: isSet(object.apiKey) ? globalThis.String(object.apiKey) : "" };
  },

  toJSON(message: RevealApiKeyResponse): unknown {
    const obj: any = {};
    if (message.apiKey !== "") {
      obj.apiKey = message.apiKey;
    }
    return obj;
  },

  create(base?: DeepPartial<RevealApiKeyResponse>): RevealApiKeyResponse {
    return RevealApiKeyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RevealApiKeyResponse>): RevealApiKeyResponse {
    const message = createBaseRevealApiKeyResponse();
    message.apiKey = object.apiKey ?? "";
    return message;
  },
};

function createBaseSummarizePeriodUsageRequest(): SummarizePeriodUsageRequest {
  return { appId: "", target: "" };
}

export const SummarizePeriodUsageRequest = {
  encode(message: SummarizePeriodUsageRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.appId !== "") {
      writer.uint32(10).string(message.appId);
    }
    if (message.target !== "") {
      writer.uint32(18).string(message.target);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SummarizePeriodUsageRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSummarizePeriodUsageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.target = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SummarizePeriodUsageRequest {
    return {
      appId: isSet(object.appId) ? globalThis.String(object.appId) : "",
      target: isSet(object.target) ? globalThis.String(object.target) : "",
    };
  },

  toJSON(message: SummarizePeriodUsageRequest): unknown {
    const obj: any = {};
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    return obj;
  },

  create(base?: DeepPartial<SummarizePeriodUsageRequest>): SummarizePeriodUsageRequest {
    return SummarizePeriodUsageRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SummarizePeriodUsageRequest>): SummarizePeriodUsageRequest {
    const message = createBaseSummarizePeriodUsageRequest();
    message.appId = object.appId ?? "";
    message.target = object.target ?? "";
    return message;
  },
};

function createBaseSummarizePeriodUsageResponse(): SummarizePeriodUsageResponse {
  return { id: "", appId: "", start: "", end: "", credits: "" };
}

export const SummarizePeriodUsageResponse = {
  encode(message: SummarizePeriodUsageResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    if (message.start !== "") {
      writer.uint32(26).string(message.start);
    }
    if (message.end !== "") {
      writer.uint32(34).string(message.end);
    }
    if (message.credits !== "") {
      writer.uint32(42).string(message.credits);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SummarizePeriodUsageResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSummarizePeriodUsageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.start = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.end = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.credits = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SummarizePeriodUsageResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      appId: isSet(object.appId) ? globalThis.String(object.appId) : "",
      start: isSet(object.start) ? globalThis.String(object.start) : "",
      end: isSet(object.end) ? globalThis.String(object.end) : "",
      credits: isSet(object.credits) ? globalThis.String(object.credits) : "",
    };
  },

  toJSON(message: SummarizePeriodUsageResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    if (message.start !== "") {
      obj.start = message.start;
    }
    if (message.end !== "") {
      obj.end = message.end;
    }
    if (message.credits !== "") {
      obj.credits = message.credits;
    }
    return obj;
  },

  create(base?: DeepPartial<SummarizePeriodUsageResponse>): SummarizePeriodUsageResponse {
    return SummarizePeriodUsageResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SummarizePeriodUsageResponse>): SummarizePeriodUsageResponse {
    const message = createBaseSummarizePeriodUsageResponse();
    message.id = object.id ?? "";
    message.appId = object.appId ?? "";
    message.start = object.start ?? "";
    message.end = object.end ?? "";
    message.credits = object.credits ?? "";
    return message;
  },
};

function createBaseUpdateBillingRequest(): UpdateBillingRequest {
  return { id: "", paymentId: "", paymentStatus: "" };
}

export const UpdateBillingRequest = {
  encode(message: UpdateBillingRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.paymentId !== "") {
      writer.uint32(18).string(message.paymentId);
    }
    if (message.paymentStatus !== "") {
      writer.uint32(26).string(message.paymentStatus);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateBillingRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBillingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.paymentId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.paymentStatus = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBillingRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      paymentId: isSet(object.paymentId) ? globalThis.String(object.paymentId) : "",
      paymentStatus: isSet(object.paymentStatus) ? globalThis.String(object.paymentStatus) : "",
    };
  },

  toJSON(message: UpdateBillingRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.paymentId !== "") {
      obj.paymentId = message.paymentId;
    }
    if (message.paymentStatus !== "") {
      obj.paymentStatus = message.paymentStatus;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateBillingRequest>): UpdateBillingRequest {
    return UpdateBillingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateBillingRequest>): UpdateBillingRequest {
    const message = createBaseUpdateBillingRequest();
    message.id = object.id ?? "";
    message.paymentId = object.paymentId ?? "";
    message.paymentStatus = object.paymentStatus ?? "";
    return message;
  },
};

function createBaseUpdateBillingResponse(): UpdateBillingResponse {
  return { id: "", appId: "", start: "", end: "", credits: "", paymentId: "", paymentStatus: "", updatedAt: "" };
}

export const UpdateBillingResponse = {
  encode(message: UpdateBillingResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    if (message.start !== "") {
      writer.uint32(26).string(message.start);
    }
    if (message.end !== "") {
      writer.uint32(34).string(message.end);
    }
    if (message.credits !== "") {
      writer.uint32(42).string(message.credits);
    }
    if (message.paymentId !== "") {
      writer.uint32(50).string(message.paymentId);
    }
    if (message.paymentStatus !== "") {
      writer.uint32(58).string(message.paymentStatus);
    }
    if (message.updatedAt !== "") {
      writer.uint32(66).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateBillingResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateBillingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.start = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.end = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.credits = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.paymentId = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.paymentStatus = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateBillingResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      appId: isSet(object.appId) ? globalThis.String(object.appId) : "",
      start: isSet(object.start) ? globalThis.String(object.start) : "",
      end: isSet(object.end) ? globalThis.String(object.end) : "",
      credits: isSet(object.credits) ? globalThis.String(object.credits) : "",
      paymentId: isSet(object.paymentId) ? globalThis.String(object.paymentId) : "",
      paymentStatus: isSet(object.paymentStatus) ? globalThis.String(object.paymentStatus) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: UpdateBillingResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    if (message.start !== "") {
      obj.start = message.start;
    }
    if (message.end !== "") {
      obj.end = message.end;
    }
    if (message.credits !== "") {
      obj.credits = message.credits;
    }
    if (message.paymentId !== "") {
      obj.paymentId = message.paymentId;
    }
    if (message.paymentStatus !== "") {
      obj.paymentStatus = message.paymentStatus;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateBillingResponse>): UpdateBillingResponse {
    return UpdateBillingResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateBillingResponse>): UpdateBillingResponse {
    const message = createBaseUpdateBillingResponse();
    message.id = object.id ?? "";
    message.appId = object.appId ?? "";
    message.start = object.start ?? "";
    message.end = object.end ?? "";
    message.credits = object.credits ?? "";
    message.paymentId = object.paymentId ?? "";
    message.paymentStatus = object.paymentStatus ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

export type AccountServiceDefinition = typeof AccountServiceDefinition;
export const AccountServiceDefinition = {
  name: "AccountService",
  fullName: "account.AccountService",
  methods: {
    createAccount: {
      name: "CreateAccount",
      requestType: CreateAccountRequest,
      requestStream: false,
      responseType: Account,
      responseStream: false,
      options: {},
    },
    validateApiKey: {
      name: "ValidateApiKey",
      requestType: ValidateApiKeyRequest,
      requestStream: false,
      responseType: Account,
      responseStream: false,
      options: {},
    },
    revealApiKey: {
      name: "RevealApiKey",
      requestType: RevealApiKeyRequest,
      requestStream: false,
      responseType: RevealApiKeyResponse,
      responseStream: false,
      options: {},
    },
    monthlyBilling: {
      name: "MonthlyBilling",
      requestType: SummarizePeriodUsageRequest,
      requestStream: false,
      responseType: SummarizePeriodUsageResponse,
      responseStream: false,
      options: {},
    },
    updateBillingStatus: {
      name: "UpdateBillingStatus",
      requestType: UpdateBillingRequest,
      requestStream: false,
      responseType: UpdateBillingResponse,
      responseStream: false,
      options: {},
    },
    getAccount: {
      name: "GetAccount",
      requestType: GetAccountRequest,
      requestStream: false,
      responseType: Account,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface AccountServiceImplementation<CallContextExt = {}> {
  createAccount(request: CreateAccountRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Account>>;
  validateApiKey(request: ValidateApiKeyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Account>>;
  revealApiKey(
    request: RevealApiKeyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RevealApiKeyResponse>>;
  monthlyBilling(
    request: SummarizePeriodUsageRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SummarizePeriodUsageResponse>>;
  updateBillingStatus(
    request: UpdateBillingRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateBillingResponse>>;
  getAccount(request: GetAccountRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Account>>;
}

export interface AccountServiceClient<CallOptionsExt = {}> {
  createAccount(request: DeepPartial<CreateAccountRequest>, options?: CallOptions & CallOptionsExt): Promise<Account>;
  validateApiKey(request: DeepPartial<ValidateApiKeyRequest>, options?: CallOptions & CallOptionsExt): Promise<Account>;
  revealApiKey(
    request: DeepPartial<RevealApiKeyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RevealApiKeyResponse>;
  monthlyBilling(
    request: DeepPartial<SummarizePeriodUsageRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SummarizePeriodUsageResponse>;
  updateBillingStatus(
    request: DeepPartial<UpdateBillingRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateBillingResponse>;
  getAccount(request: DeepPartial<GetAccountRequest>, options?: CallOptions & CallOptionsExt): Promise<Account>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
