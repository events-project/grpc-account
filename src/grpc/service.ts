// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.1
// source: service.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import * as _m0 from "protobufjs/minimal";
import Long = require("long");

export const protobufPackage = "account";

export interface CreateAccountRequest {
  id: string;
}

export interface Account {
  id: string;
  credits: number;
}

export interface ValidateApiKeyRequest {
  key: string;
}

function createBaseCreateAccountRequest(): CreateAccountRequest {
  return { id: "" };
}

export const CreateAccountRequest = {
  encode(message: CreateAccountRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateAccountRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAccountRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: CreateAccountRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAccountRequest>): CreateAccountRequest {
    return CreateAccountRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAccountRequest>): CreateAccountRequest {
    const message = createBaseCreateAccountRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseAccount(): Account {
  return { id: "", credits: 0 };
}

export const Account = {
  encode(message: Account, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.credits !== 0) {
      writer.uint32(16).int64(message.credits);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Account {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.credits = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Account {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      credits: isSet(object.credits) ? globalThis.Number(object.credits) : 0,
    };
  },

  toJSON(message: Account): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.credits !== 0) {
      obj.credits = Math.round(message.credits);
    }
    return obj;
  },

  create(base?: DeepPartial<Account>): Account {
    return Account.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Account>): Account {
    const message = createBaseAccount();
    message.id = object.id ?? "";
    message.credits = object.credits ?? 0;
    return message;
  },
};

function createBaseValidateApiKeyRequest(): ValidateApiKeyRequest {
  return { key: "" };
}

export const ValidateApiKeyRequest = {
  encode(message: ValidateApiKeyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ValidateApiKeyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateApiKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateApiKeyRequest {
    return { key: isSet(object.key) ? globalThis.String(object.key) : "" };
  },

  toJSON(message: ValidateApiKeyRequest): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create(base?: DeepPartial<ValidateApiKeyRequest>): ValidateApiKeyRequest {
    return ValidateApiKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidateApiKeyRequest>): ValidateApiKeyRequest {
    const message = createBaseValidateApiKeyRequest();
    message.key = object.key ?? "";
    return message;
  },
};

export type AccountServiceDefinition = typeof AccountServiceDefinition;
export const AccountServiceDefinition = {
  name: "AccountService",
  fullName: "account.AccountService",
  methods: {
    createAccount: {
      name: "CreateAccount",
      requestType: CreateAccountRequest,
      requestStream: false,
      responseType: Account,
      responseStream: false,
      options: {},
    },
    validateApiKey: {
      name: "ValidateApiKey",
      requestType: ValidateApiKeyRequest,
      requestStream: false,
      responseType: Account,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface AccountServiceImplementation<CallContextExt = {}> {
  createAccount(request: CreateAccountRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Account>>;
  validateApiKey(request: ValidateApiKeyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Account>>;
}

export interface AccountServiceClient<CallOptionsExt = {}> {
  createAccount(request: DeepPartial<CreateAccountRequest>, options?: CallOptions & CallOptionsExt): Promise<Account>;
  validateApiKey(request: DeepPartial<ValidateApiKeyRequest>, options?: CallOptions & CallOptionsExt): Promise<Account>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
